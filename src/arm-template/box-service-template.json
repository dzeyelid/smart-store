{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.1.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If you would like to specify the location of resources that is different from resource group, specify here. Or leave blank then the deployment use the resource group's location."
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix string should be within 2 characters."
      }
    },
    "suffix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Set like `-dev`. Or, if suffix is not needed, leave blank."
      }
    },
    "delimiter": {
      "type": "string",
      "defaultValue": "-"
    },
    "storageAccountsSkuName": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_RAGRS",
        "Standard_GRS",
        "Premium_LRS",
        "Premium_ZRS"
      ]
    },
    "storageAccountsKind": {
      "type": "string",
      "allowedValues": ["Storage", "StorageV2"]
    },
    "storageAccountsSuffix": {
      "type": "string"
    },
    "boxIotHubSku": {
      "type": "string"
    },
    "boxApiAppServicePlanSku": {
      "type": "string"
    },
    "boxServiceApiZipUrl": {
      "type": "string"
    },
    "posApiFunctionUrl": {
      "type": "string"
    },
    "keyVaultName": {
      "type": "string"
    },
    "service": {
      "type": "object"
    },
    "vnetName": {
      "type": "string"
    },
    "allowedWorkspaceIpAddress": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "boxApiAppServicePlan": "aspBox",
    "boxApiName": "box-api",
    "location": "[if(equals(parameters('location'), ''), resourceGroup().location, parameters('location'))]",
    "boxApiAppServicePlanName": "[concat(parameters('prefix'), parameters('delimiter'), variables('boxApiAppServicePlan'), parameters('suffix'))]",
    "boxIotHubName": "[concat(parameters('prefix'), parameters('delimiter'), parameters('service').identifier, parameters('suffix'))]",
    "boxServiceIoTHubSecretName": "boxServiceIoTHubConnectionString",
    "boxServiceIoTHubEventSecretName": "boxServiceIoTHubEventConnectionString",
    "boxCosmosDbAccountName": "[concat(parameters('prefix'), parameters('delimiter'), parameters('service').identifier, parameters('suffix'))]",
    "boxCosmosDbDatabaseName": "smartretailboxmanagement",
    "boxCosmosDbDatabaseThroughput": 400,
    "boxCosmosDbCollections": [
      {
        "name": "BoxManagements",
        "partitionKeyPath": "/boxId"
      },
      {
        "name": "Terminals",
        "partitionKeyPath": "/boxId"
      },
      {
        "name": "Skus",
        "partitionKeyPath": "/companyCode"
      },
      {
        "name": "Stocks",
        "partitionKeyPath": "/boxId"
      }
    ],
    "boxServiceCosmosDbSecretName": "boxServiceCosmosDbConnectionString",
    "boxApiFunctionName": "[concat(parameters('prefix'), parameters('delimiter'), variables('boxApiName'), parameters('suffix'))]",
    "boxApiStorageAccountsName": "[replace(concat(parameters('prefix'), variables('boxApiName'), parameters('storageAccountsSuffix'), parameters('suffix')), parameters('delimiter'), '')]",
    "boxServiceAppInsightsName": "[concat(parameters('prefix'), parameters('delimiter'), parameters('service').identifier, parameters('suffix'))]",
    "posCartsUri": "[concat('https://', parameters('posApiFunctionUrl'), '/api/v1/carts/')]",
    "cosmosDbIpRangeFilter": "[cosmosDbIpRangeFilter.allowAccessFromPortal(parameters('allowedWorkspaceIpAddress'))]",
    "delegatedSubnetName": "[parameters('service').identifier]"
  },
  "resources": [
    {
      "name": "[variables('boxIotHubName')]",
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2018-04-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('boxIotHubSku')]",
        "capacity": 1
      },
      "properties": {
        "routing": {
          "routes": [
            {
              "name": "AI",
              "source": "DeviceMessages",
              "condition": "IS_ARRAY($body.items)\r\nAND (($body.message_type = 'stock_start') OR ($body.message_type = 'stock_diff_trading') OR ($body.message_type = 'stock_end'))",
              "endpointNames": [
                "events"
              ],
              "isEnabled": true
            }
          ]
        }
      }
    },
    {
      "name": "[concat(parameters('keyVaultName'), '/', variables('boxServiceIoTHubSecretName'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "properties": {
        "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IotHubs', variables('boxIotHubName')), '2018-04-01').hostName, ';SharedAccessKeyName=', listKeys(resourceId('Microsoft.Devices/IotHubs', variables('boxIotHubName')), '2018-04-01').value[0].keyName, ';SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', variables('boxIotHubName')), '2018-04-01').value[0].primaryKey)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', variables('boxIotHubName'))]"
      ]
    },
    {
      "name": "[concat(parameters('keyVaultName'), '/', variables('boxServiceIoTHubEventSecretName'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "properties": {
        "value": "[concat('Endpoint=', reference(resourceId('Microsoft.Devices/IotHubs', variables('boxIotHubName')), '2018-04-01').eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=', listKeys(resourceId('Microsoft.Devices/IotHubs', variables('boxIotHubName')), '2018-04-01').value[0].keyName, ';SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', variables('boxIotHubName')), '2018-04-01').value[0].primaryKey, ';EntityPath=', reference(resourceId('Microsoft.Devices/IotHubs', variables('boxIotHubName')), '2018-04-01').eventHubEndpoints.events.path)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', variables('boxIotHubName'))]"
      ]
    },
    {
      "name": "[variables('boxCosmosDbAccountName')]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2019-12-12",
      "location": "[variables('location')]",
      "tags": {
        "defaultExperience": "Core (SQL)"
      },
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[variables('location')]"
          }
        ],
        "isVirtualNetworkFilterEnabled": true,
        "virtualNetworkRules": [
          {
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), variables('delegatedSubnetName'))]",
            "ignoreMissingVNetServiceEndpoint": false
          }
        ],
        "ipRangeFilter": "[variables('cosmosDbIpRangeFilter')]"
      },
      "resources": [
        {
          "type": "apis/databases",
          "name": "[concat('sql/', variables('boxCosmosDbDatabaseName'))]",
          "apiVersion": "2016-03-31",
          "properties": {
            "resource": {
              "id": "[variables('boxCosmosDbDatabaseName')]"
            },
            "options": {
              "throughput": "[variables('boxCosmosDbDatabaseThroughput')]"
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('boxCosmosDbAccountName'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
      "name": "[concat(variables('boxCosmosDbAccountName'), '/sql/', variables('boxCosmosDbDatabaseName'), '/', variables('boxCosmosDbCollections')[copyIndex('cosmosDbCollectionCopy')]['name'])]",
      "apiVersion": "2016-03-31",
      "properties": {
        "resource": {
          "id": "[variables('boxCosmosDbCollections')[copyIndex('cosmosDbCollectionCopy')]['name']]",
          "partitionKey": {
            "paths": [
              "[variables('boxCosmosDbCollections')[copyIndex('cosmosDbCollectionCopy')]['partitionKeyPath']]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('boxCosmosDbAccountName'), 'sql', variables('boxCosmosDbDatabaseName'))]"
      ],
      "copy": {
        "name": "cosmosDbCollectionCopy",
        "count": "[length(variables('boxCosmosDbCollections'))]"
      }
    },
    {
      "name": "[concat(parameters('keyVaultName'), '/', variables('boxServiceCosmosDbSecretName'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "properties": {
        "value": "[concat('AccountEndpoint=', reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('boxCosmosDbAccountName'))).documentEndpoint, ';AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('boxCosmosDbAccountName')), '2015-04-08').primaryMasterKey)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('boxCosmosDbAccountName'))]"
      ]
    },
    {
      "name": "[variables('boxApiAppServicePlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('boxApiAppServicePlanSku')]"
      },
      "properties": {}
    },
    {
      "name": "[variables('boxApiStorageAccountsName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "sku": {
        "name": "[parameters('storageAccountsSkuName')]"
      },
      "kind": "[parameters('storageAccountsKind')]",
      "location": "[variables('location')]",
      "properties": {
        "networkAcls": {
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), variables('delegatedSubnetName'))]",
              "action": "Allow"
            }
          ],
          "defaultAction": "Deny"
        }
      }
    },
    {
      "name": "[variables('boxApiFunctionName')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "kind": "functionapp",
      "location": "[variables('location')]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('boxApiAppServicePlanName'))]",
        "siteConfig": {
          "alwaysOn": true,
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          }
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "resources": [
        {
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2019-08-01",
          "properties": {
            "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), variables('delegatedSubnetName'))]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('boxApiFunctionName'))]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('boxApiAppServicePlanName'))]"
      ]
    },
    {
      "name": "[concat(parameters('keyVaultName'), '/add')]",
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2018-02-14",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('boxApiFunctionName')), '2019-08-01', 'Full').identity.tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('boxApiFunctionName')), '2019-08-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('boxApiFunctionName'))]"
      ]
    },
    {
      "name": "[concat(variables('boxApiFunctionName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2019-08-01",
      "properties": {
        "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('boxApiStorageAccountsName'), ';AccountKey=', listKeys(variables('boxApiStorageAccountsName'),'2018-07-01').keys[0].value)]",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('boxServiceAppInsightsName')), '2015-05-01').InstrumentationKey]",
        "WEBSITE_RUN_FROM_PACKAGE": "[parameters('boxServiceApiZipUrl')]",
        "CosmosDbConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), variables('boxServiceCosmosDbSecretName'))).secretUriWithVersion, ')')]",
        "PosCartsUri": "[variables('posCartsUri')]",
        "NotificationApiKeyHeader": "X-API-Token",
        "PosApiKeyHeader": "x-functions-key",
        "PosCartItemsPath": "items/",
        "PosCartSubtotalPath": "subtotal/",
        "PosCartPaymentsPath": "payments/",
        "PosCartBillPath": "bill/",
        "IotHubConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), variables('boxServiceIoTHubSecretName'))).secretUriWithVersion, ')')]",
        "IotHubEventConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), variables('boxServiceIoTHubEventSecretName'))).secretUriWithVersion, ')')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), variables('boxServiceCosmosDbSecretName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), variables('boxServiceIoTHubSecretName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), variables('boxServiceIoTHubEventSecretName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('boxApiStorageAccountsName'))]"
      ]
    },
    {
      "name": "[variables('boxServiceAppInsightsName')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "location": "[variables('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('boxApiFunctionName'))]": "Resource"
      },
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    }
  ],
  "functions": [
    {
      "namespace": "cosmosDbIpRangeFilter",
      "members": {
        // Allow to access to Cosmos DB via Azure Portal
        "allowAccessFromPortal": {
          "parameters": [
            {
              "name": "ipRangeFilter",
              "type": "string"
            }
          ],
          "output": {
            "type": "string",
            "value": "[concat(parameters('ipRangeFilter'), if(equals(parameters('ipRangeFilter'),''),'',','), '104.42.195.92,40.76.54.131,52.176.6.30,52.169.50.45,52.187.184.26')]"
          }
        }
      }
    }
  ]
}
