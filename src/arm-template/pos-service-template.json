{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.1.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If you would like to specify the location of resources that is different from resource group, specify here. Or leave blank then the deployment use the resource group's location."
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix string should be within 2 characters."
      }
    },
    "suffix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Set like `-dev`. Or, if suffix is not needed, leave blank."
      }
    },
    "delimiter": {
      "type": "string",
      "defaultValue": "-"
    },
    "storageAccountsSkuName": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_RAGRS",
        "Standard_GRS",
        "Premium_LRS",
        "Premium_ZRS"
      ]
    },
    "storageAccountsKind": {
      "type": "string",
      "allowedValues": ["Storage", "StorageV2"]
    },
    "storageAccountsSuffix": {
      "type": "string"
    },
    "posApiName": {
      "type": "string"
    },
    "posApiFunctionName": {
      "type": "string"
    },
    "posApiAppServicePlanSku": {
      "type": "string"
    },
    "posServiceApiZipUrl": {
      "type": "string"
    },
    "itemMasterUri": {
      "type": "string"
    },
    "stockCommandUri": {
      "type": "string"
    },
    "appInsightsName": {
      "type": "string"
    },
    "keyVaultName": {
      "type": "string"
    },
    "service": {
      "type": "object"
    },
    "vnetName": {
      "type": "string"
    },
    "allowableSubnetNames": {
      "type": "array",
      "defaultValue": []
    },
    "cosmosDbIpRangeFilter": {
      "type": "string"
    }
  },
  "variables": {
    "posServiceGroupName": "pos-service",
    "posApiAppServicePlan": "aspPos",
    "location": "[if(equals(parameters('location'), ''), resourceGroup().location, parameters('location'))]",
    "posApiAppServicePlanName": "[concat(parameters('prefix'), parameters('delimiter'), variables('posApiAppServicePlan'), parameters('suffix'))]",
    "posCosmosDbAccountName": "[concat(parameters('prefix'), parameters('delimiter'), variables('posServiceGroupName'), parameters('suffix'))]",
    "posCosmosDbDatabaseName": "smartretailpos",
    "posCosmosDbDatabaseThroughput": 500,
    "posCosmosDbCollectionCarts": {
      "name": "Carts",
      "partitionKeyPath": "/cartId",
      "defaultTtl": 604800
    },
    "posCosmosDbCollections": [
      {
        "name": "PosMasters",
        "partitionKeyPath": "/mastername"
      },
      {
        "name": "TransactionLogs",
        "partitionKeyPath": "/key"
      },
      {
        "name": "Receipts",
        "partitionKeyPath": "/key"
      },
      {
        "name": "Counters",
        "partitionKeyPath": "/terminalKey"
      }
    ],
    "posServiceCosmosDbSecretName": "posServiceCosmosDbConnectionString",
    "posApiStorageAccountsName": "[replace(concat(parameters('prefix'), parameters('posApiName'), parameters('storageAccountsSuffix'), parameters('suffix')), parameters('delimiter'), '')]",
    "itemMasterUri": "[concat('https://', parameters('itemMasterUri'),'/api/v1/company/{company-code}/store/{store-code}/items')]",
    "stockCommandUri": "[concat('https://', parameters('stockCommandUri'), '/api/v1/stocks')]",
    "delegatedSubnetName": "[parameters('service').identifier]",
    "ipSecurityRestrictionsBasePriority": 300,
    "allowableSubnetNames": "[createArray(variables('delegatedSubnetName'))]",
    "allAllowableSubnetNames": "[concat(variables('allowableSubnetNames'), parameters('allowableSubnetNames'))]",
    "copy": [
      {
        "name": "allAllowableSubnets",
        "count": "[length(variables('allAllowableSubnetNames'))]",
        "input": "[
          alloableSubnet.create(
            variables('allAllowableSubnetNames')[copyIndex('allAllowableSubnets')],
            resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), variables('allAllowableSubnetNames')[copyIndex('allAllowableSubnets')])
          )
        ]"
      },
      {
        "name": "ipSecurityRestrictions",
        "count": "[length(variables('allAllowableSubnets'))]",
        "input": "[
          ipSecurityRestriction.create(
            variables('allAllowableSubnets')[copyIndex('ipSecurityRestrictions')].name,
            variables('allAllowableSubnets')[copyIndex('ipSecurityRestrictions')].vnetSubnetResourceId,
            add(variables('ipSecurityRestrictionsBasePriority'), copyIndex('ipSecurityRestrictions'))
          )
        ]"
      }
    ]
  },
  "resources": [
    {
      "name": "[variables('posCosmosDbAccountName')]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2019-12-12",
      "location": "[variables('location')]",
      "tags": {
        "defaultExperience": "Core (SQL)"
      },
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[variables('location')]"
          }
        ],
        "isVirtualNetworkFilterEnabled": true,
        "virtualNetworkRules": [
          {
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), variables('delegatedSubnetName'))]",
            "ignoreMissingVNetServiceEndpoint": false
          }
        ],
        "ipRangeFilter": "[parameters('cosmosDbIpRangeFilter')]"
      },
      "resources": [
        {
          "type": "apis/databases",
          "name": "[concat('sql/', variables('posCosmosDbDatabaseName'))]",
          "apiVersion": "2016-03-31",
          "properties": {
            "resource": {
              "id": "[variables('posCosmosDbDatabaseName')]"
            },
            "options": {
              "throughput": "[variables('posCosmosDbDatabaseThroughput')]"
            }
          },
          "dependsOn": [
            "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('posCosmosDbAccountName'))]"
          ],
          "resources": [
            {
              "type": "containers",
              "name": "[variables('posCosmosDbCollectionCarts')['name']]",
              "apiVersion": "2016-03-31",
              "properties": {
                "resource": {
                  "id": "[variables('posCosmosDbCollectionCarts')['name']]",
                  "partitionKey": {
                    "paths": [
                      "[variables('posCosmosDbCollectionCarts')['partitionKeyPath']]"
                    ]
                  },
                  "defaultTtl": "[variables('posCosmosDbCollectionCarts')['defaultTtl']]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('posCosmosDbAccountName'), 'sql', variables('posCosmosDbDatabaseName'))]"
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
      "name": "[concat(variables('posCosmosDbAccountName'), '/sql/', variables('posCosmosDbDatabaseName'), '/', variables('posCosmosDbCollections')[copyIndex('cosmosDbCollectionCopy')]['name'])]",
      "apiVersion": "2016-03-31",
      "properties": {
        "resource": {
          "id": "[variables('posCosmosDbCollections')[copyIndex('cosmosDbCollectionCopy')]['name']]",
          "partitionKey": {
            "paths": [
              "[variables('posCosmosDbCollections')[copyIndex('cosmosDbCollectionCopy')]['partitionKeyPath']]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('posCosmosDbAccountName'), 'sql', variables('posCosmosDbDatabaseName'))]"
      ],
      "copy": {
        "name": "cosmosDbCollectionCopy",
        "count": "[length(variables('posCosmosDbCollections'))]"
      }
    },
    {
      "name": "[concat(parameters('keyVaultName'), '/', variables('posServiceCosmosDbSecretName'))]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "properties": {
        "value": "[concat('AccountEndpoint=', reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('posCosmosDbAccountName'))).documentEndpoint, ';AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('posCosmosDbAccountName')), '2015-04-08').primaryMasterKey)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('posCosmosDbAccountName'))]"
      ]
    },
    {
      "name": "[variables('posApiAppServicePlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('posApiAppServicePlanSku')]"
      },
      "properties": {}
    },
    {
      "name": "[variables('posApiStorageAccountsName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "sku": {
        "name": "[parameters('storageAccountsSkuName')]"
      },
      "kind": "[parameters('storageAccountsKind')]",
      "location": "[variables('location')]",
      "properties": {
        "networkAcls": {
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), variables('delegatedSubnetName'))]",
              "action": "Allow"
            }
          ],
          "defaultAction": "Deny"
        }
      }
    },
    {
      "name": "[parameters('posApiFunctionName')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "kind": "functionapp",
      "location": "[variables('location')]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('posApiAppServicePlanName'))]",
        "siteConfig": {
          "alwaysOn": true,
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          },
          "ipSecurityRestrictions": "[variables('ipSecurityRestrictions')]"
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "resources": [
        {
          "name": "virtualNetwork",
          "type": "config",
          "apiVersion": "2019-08-01",
          "properties": {
            "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), variables('delegatedSubnetName'))]",
            "swiftSupported": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', parameters('posApiFunctionName'))]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('posApiAppServicePlanName'))]"
      ]
    },
    {
      "name": "[concat(parameters('keyVaultName'), '/add')]",
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2018-02-14",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[reference(resourceId('Microsoft.Web/sites', parameters('posApiFunctionName')), '2019-08-01', 'Full').identity.tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('posApiFunctionName')), '2019-08-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('posApiFunctionName'))]"
      ]
    },
    {
      "name": "[concat(parameters('posApiFunctionName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2019-08-01",
      "properties": {
        "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('posApiStorageAccountsName'), ';AccountKey=', listKeys(variables('posApiStorageAccountsName'),'2018-07-01').keys[0].value)]",
        "FUNCTIONS_EXTENSION_VERSION": "~2",
        "WEBSITE_RUN_FROM_PACKAGE": "[parameters('posServiceApiZipUrl')]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2015-05-01').InstrumentationKey]",
        "CosmosDbConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), variables('posServiceCosmosDbSecretName'))).secretUriWithVersion, ')')]",
        "ItemMasterUri": "[variables('itemMasterUri')]",
        "StockUri": "[variables('stockCommandUri')]",
        "ApplicationTimeZone": "Tokyo Standard Time",
        "FunctionsApiKeyHeader": "x-functions-key"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), variables('posServiceCosmosDbSecretName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('posApiStorageAccountsName'))]"
      ]
    }
  ],
  "outputs": {
    "posApiAppServicePlanName": {
      "type": "string",
      "value": "[variables('posApiAppServicePlanName')]"
    },
    "posApiFunctionUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('posApiFunctionName')), '2018-02-01').defaultHostName]"
    }
  },
  "functions": [
    {
      "namespace": "alloableSubnet",
      "members": {
        "create": {
          "parameters": [
            {
              "name": "subnetName",
              "type": "string"
            },
            {
              "name": "subnetResourceId",
              "type": "string"
            }
          ],
          "output": {
            "type": "object",
            "value": {
              "vnetSubnetResourceId": "[parameters('subnetResourceId')]",
              "name": "[parameters('subnetName')]"
            }
          }
        }
      }
    },
    {
      "namespace": "ipSecurityRestriction",
      "members": {
        "create": {
          "parameters": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "vnetSubnetResourceId",
              "type": "string"
            },
            {
              "name": "priority",
              "type": "int"
            }
          ],
          "output": {
            "type": "object",
            "value": {
              "vnetSubnetResourceId": "[parameters('vnetSubnetResourceId')]",
              "action": "Allow",
              "priority": "[parameters('priority')]",
              "name": "[parameters('name')]"
            }
          }
        }
      }
    }
  ]
}
